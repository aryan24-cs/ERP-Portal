<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ERP Portal - Your Documents</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      :root {
        --primary-blue: #3b82f6;
        --primary-purple: #8b5cf6;
        --primary-teal: #06b6d4;
        --primary-pink: #ec4899;
        --primary-indigo: #6366f1;
        --accent-orange: #f97316;
      }

      body {
        font-family: "Poppins", sans-serif;
        background: linear-gradient(135deg, #164172 0%, #3d5f75 100%);
        min-height: 100vh;
        overflow-x: hidden;
      }

      .icon-bubble i {
        color: white;
        font-size: 32px;
      }

      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100%;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-right: 1px solid rgba(255, 255, 255, 0.2);
        padding: 2rem 1rem;
        z-index: 1000;
        transition: transform 0.3s ease;
      }

      .sidebar.hidden {
        transform: translateX(-100%);
      }

      .sidebar-toggle {
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: var(--primary-blue);
        color: white;
        padding: 0.5rem;
        border-radius: 50%;
        cursor: pointer;
        display: none;
      }

      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
        }
        .sidebar.active {
          transform: translateX(0);
        }
        .sidebar-toggle {
          display: block;
        }
      }

      .sidebar-nav a {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        color: white;
        text-decoration: none;
        border-radius: 10px;
        margin-bottom: 0.5rem;
        transition: all 0.3s ease;
      }

      .sidebar-nav a:hover,
      .sidebar-nav a.active {
        background: rgba(255, 255, 255, 0.2);
        transform: translateX(5px);
      }

      .sidebar-nav a i {
        margin-right: 0.75rem;
      }

      .morphing-container {
        margin-left: 250px;
        padding: 2rem;
        position: relative;
        z-index: 10;
      }

      @media (max-width: 768px) {
        .morphing-container {
          margin-left: 0;
        }
      }

      .blob-card {
        background: rgba(22, 21, 21, 0.15);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
      }

      .blob-card:hover {
        transform: translateY(-15px) scale(1.02);
        box-shadow: 0 35px 70px rgba(0, 0, 0, 0.15);
      }

      .documents-blob {
        border-radius: 50px 30px 50px 30px;
        transform: rotate(-1deg);
        margin: 1.5rem 0.5rem;
      }

      .text-flow {
        color: white;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
      }

      .fade-in-flow {
        animation: fadeInFlow 1s ease-out forwards;
        opacity: 0;
      }

      .slide-in-left {
        animation: slideInLeft 0.8s ease-out forwards;
        opacity: 0;
        transform: translateX(-50px);
      }

      @keyframes fadeInFlow {
        to {
          opacity: 1;
        }
      }

      @keyframes slideInLeft {
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      .table-container {
        overflow-x: auto;
        background: rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(15px);
        border-radius: 10px;
        padding: 1rem;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        background: transparent;
      }

      th,
      td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
      }

      th {
        background: rgba(255, 255, 255, 0.1);
        cursor: pointer;
      }

      .flowing-button {
        background: linear-gradient(
          135deg,
          var(--primary-blue),
          var(--primary-purple),
          var(--primary-teal)
        );
        background-size: 200% 200%;
        border: none;
        border-radius: 50px;
        padding: 0.75rem 1.5rem;
        color: white;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        animation: gradientFlow 3s ease infinite;
      }

      .flowing-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      @keyframes gradientFlow {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      .flowing-button:hover:not(:disabled) {
        transform: translateY(-3px) scale(1.05);
        box-shadow: 0 15px 40px rgba(59, 130, 246, 0.4);
      }

      .error-message {
        color: #ef4444;
        background: rgba(255, 255, 255, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
        display: none;
      }
    </style>
  </head>
  <body>
    <button class="sidebar-toggle" aria-label="Toggle Sidebar">
      <i class="fas fa-bars"></i>
    </button>
    <%- include('../partials/sidebar', { token, currentPage: 'documents' }) %>

    <div class="morphing-container">
      <header class="organic-header fade-in-flow">
        <div class="px-8 py-6">
          <div class="flex items-center">
            <div class="icon-bubble mr-6">
              <i class="fas fa-file-alt"></i>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-flow">Your Documents</h1>
              <p class="text-flow opacity-90 text-lg">All semester files</p>
            </div>
          </div>
        </div>
      </header>

      <main class="flowing-grid">
        <section class="documents-section">
          <div class="blob-card documents-blob slide-in-left">
            <div class="p-8">
              <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-bold text-flow">Your Documents</h3>
                <div class="flex space-x-4">
                  <select
                    id="semester-filter"
                    class="bg-white bg-opacity-10 text-white border border-white border-opacity-20 rounded-md p-2"
                  >
                    <option value="all">All Semesters</option>
                    <% const semesters = [...new Set(documents.map(doc =>
                    doc.semester))].sort(); %> <% semesters.forEach(semester =>
                    { %>
                    <option value="<%= semester %>">
                      Semester <%= semester %>
                    </option>
                    <% }) %>
                  </select>
                  <select
                    id="sort-by"
                    class="bg-white bg-opacity-10 text-white border border-white border-opacity-20 rounded-md p-2"
                  >
                    <option value="createdAt-desc">Newest First</option>
                    <option value="createdAt-asc">Oldest First</option>
                    <option value="fileType-asc">File Type (A-Z)</option>
                    <option value="originalFilename-asc">Filename (A-Z)</option>
                  </select>
                </div>
              </div>
              <div id="error-message" class="error-message"></div>
              <div class="table-container">
                <table id="documents-table">
                  <thead>
                    <tr>
                      <th>Filename</th>
                      <th>File Type</th>
                      <th>Semester</th>
                      <th>Uploaded On</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (documents.length === 0) { %>
                    <tr>
                      <td colspan="5" class="text-center text-flow opacity-70">
                        No documents available
                      </td>
                    </tr>
                    <% } else { %> <% documents.forEach((doc, index) => { %>
                    <tr data-semester="<%= doc.semester %>">
                      <td><%= doc.originalFilename || doc.fileType %></td>
                      <td><%= doc.fileType %></td>
                      <td><%= doc.semester %></td>
                      <td>
                        <%= new Date(doc.createdAt).toLocaleDateString('en-US',
                        { year: 'numeric', month: 'long', day: 'numeric' }) %>
                      </td>
                      <td>
                        <div class="flex space-x-2">
                          <a
                            href="<%= doc.fileUrl %>"
                            target="_blank"
                            class="flowing-button view-button"
                          >
                            <i class="fas fa-eye mr-2"></i> View
                          </a>
                          <button
                            class="flowing-button download-button"
                            data-public-id="<%= doc.publicId.split('/').pop() %>"
                            data-filename="<%= doc.originalFilename || doc.fileType %>"
                            onclick="downloadDocument(this)"
                          >
                            <i class="fas fa-download mr-2"></i> Download
                          </button>
                        </div>
                      </td>
                    </tr>
                    <% }) %> <% } %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </section>
      </main>
    </div>

    <script>
      // Sidebar toggle
      const sidebar = document.querySelector(".sidebar");
      const toggle = document.querySelector(".sidebar-toggle");
      toggle.addEventListener("click", () => {
        sidebar.classList.toggle("active");
      });

      // Semester filter
      const semesterFilter = document.getElementById("semester-filter");
      const documentsTable = document.getElementById("documents-table");
      semesterFilter.addEventListener("change", () => {
        const selectedSemester = semesterFilter.value;
        const rows = documentsTable.querySelectorAll("tbody tr");
        rows.forEach((row) => {
          if (
            selectedSemester === "all" ||
            row.dataset.semester === selectedSemester
          ) {
            row.style.display = "";
          } else {
            row.style.display = "none";
          }
        });
      });

      // Sorting
      const sortBy = document.getElementById("sort-by");
      sortBy.addEventListener("change", () => {
        const [field, order] = sortBy.value.split("-");
        const tbody = documentsTable.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));
        rows.sort((a, b) => {
          let aValue, bValue;
          if (field === "createdAt") {
            aValue = new Date(a.cells[3].textContent);
            bValue = new Date(b.cells[3].textContent);
          } else if (field === "fileType") {
            aValue = a.cells[1].textContent.toLowerCase();
            bValue = b.cells[1].textContent.toLowerCase();
          } else if (field === "originalFilename") {
            aValue = a.cells[0].textContent.toLowerCase();
            bValue = b.cells[0].textContent.toLowerCase();
          }
          if (order === "asc") {
            return aValue > bValue ? 1 : -1;
          } else {
            return aValue < bValue ? 1 : -1;
          }
        });
        tbody.innerHTML = "";
        rows.forEach((row) => tbody.appendChild(row));
      });

      // Download with loading state and error handling
      async function downloadDocument(button) {
        const publicId = button.dataset.publicId;
        const filename = button.dataset.filename;
        const errorMessage = document.getElementById("error-message");
        button.disabled = true;
        button.innerHTML =
          '<i class="fas fa-spinner fa-spin mr-2"></i> Downloading...';
        errorMessage.style.display = "none";

        try {
          const response = await fetch(
            `/users/download/${publicId}?token=<%= token %>`,
            {
              method: "GET",
              headers: {
                Accept: "application/octet-stream",
              },
            }
          );

          if (!response.ok) {
            throw new Error(`Download failed: ${response.statusText}`);
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(url);
        } catch (err) {
          console.error("Download error:", err);
          errorMessage.textContent = `Failed to download ${filename}: ${err.message}`;
          errorMessage.style.display = "block";
        } finally {
          button.disabled = false;
          button.innerHTML = '<i class="fas fa-download mr-2"></i> Download';
        }
      }
    </script>
  </body>
</html>
