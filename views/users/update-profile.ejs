<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ERP Portal - Update Profile</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
    rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    :root {
      --primary-blue: #1e90ff;
      --primary-purple: #7c3aed;
      --primary-teal: #14b8a6;
      --primary-pink: #ec4899;
      --primary-indigo: #4f46e5;
      --accent-orange: #f97316;
      --bg-light: #f0f4f8;
      --card-bg: #ffffff;
      --text-dark: #1f2937;
      --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Poppins", sans-serif;
      background: var(--bg-light);
      min-height: 100vh;
      overflow-x: hidden;
      color: var(--text-dark);
    }

    .icon-bubble {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary-blue), var(--primary-teal));
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--card-bg);
      font-size: 1.5rem;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      width: 250px;
      height: 100%;
      background: var(--card-bg);
      border-right: 1px solid #e5e7eb;
      padding: 2rem 1rem;
      z-index: 1000;
      transition: transform 0.3s ease;
    }

    .sidebar.hidden {
      transform: translateX(-100%);
    }

    .sidebar-toggle {
      position: fixed;
      top: 1rem;
      left: 1rem;
      z-index: 1001;
      background: var(--primary-blue);
      color: var(--card-bg);
      padding: 0.5rem;
      border-radius: 50%;
      cursor: pointer;
      display: none;
    }

    @media (max-width: 768px) {
      .sidebar {
        transform: translateX(-100%);
      }

      .sidebar.active {
        transform: translateX(0);
      }

      .sidebar-toggle {
        display: block;
      }
    }

    .sidebar-nav a {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-dark);
      text-decoration: none;
      border-radius: 10px;
      margin-bottom: 0.5rem;
      transition: all 0.3s ease;
    }

    .sidebar-nav a:hover,
    .sidebar-nav a.active {
      background: var(--bg-light);
      transform: translateX(5px);
    }

    .sidebar-nav a i {
      margin-right: 0.75rem;
      color: var(--primary-blue);
    }

    .morphing-container {
      margin-left: 260px;
      margin-top: 3rem;
      padding: 2rem 1.5rem;
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto;
      transition: margin-left 0.3s ease;
    }

    @media (max-width: 768px) {
      .morphing-container {
        margin-left: 0;
        margin-top: 1.5rem;
        padding: 1rem;
      }
    }

    .organic-header,
    .update-profile-section {
      margin-bottom: 3rem;
    }

    .blob-card {
      background: var(--card-bg);
      border-radius: 15px;
      box-shadow: var(--shadow);
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      position: relative;
      overflow: hidden;
    }

    .blob-card:hover {
      transform: translateY(-10px) scale(1.03);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
    }

    .blob-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(30, 144, 255, 0.2) 0%, transparent 70%);
      transition: transform 0.5s ease;
      transform: scale(0);
      z-index: 0;
    }

    .blob-card:hover::before {
      transform: scale(1) rotate(45deg);
    }

    .update-profile-blob {
      padding: 2.5rem;
    }

    .text-flow {
      color: var(--text-dark);
    }

    .fade-in-flow {
      animation: fadeInFlow 1s ease-out forwards;
      opacity: 0;
    }

    .slide-in-left {
      animation: slideInLeft 0.8s ease-out forwards;
      opacity: 0;
      transform: translateX(-50px);
    }

    @keyframes fadeInFlow {
      to {
        opacity: 1;
      }
    }

    @keyframes slideInLeft {
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    .input-flow {
      background: #f9fafb;
      border: 1px solid #d1d5db;
      border-radius: 10px;
      padding: 0.75rem;
      color: var(--text-dark);
      width: 100%;
      transition: all 0.3s ease;
    }

    .input-flow:focus {
      outline: none;
      border-color: var(--primary-blue);
      box-shadow: 0 0 10px rgba(30, 144, 255, 0.3);
    }

    .input-flow.invalid {
      border-color: #ef4444;
      box-shadow: 0 0 10px rgba(239, 68, 68, 0.3);
    }

    .flowing-button {
      background: linear-gradient(135deg, var(--primary-blue), var(--primary-teal));
      background-size: 200% 200%;
      border: none;
      border-radius: 50px;
      padding: 0.75rem 1.5rem;
      color: var(--card-bg);
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
      animation: gradientFlow 3s ease infinite;
    }

    .flowing-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    @keyframes gradientFlow {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .flowing-button:hover:not(:disabled) {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 15px 40px rgba(30, 144, 255, 0.4);
    }

    .success-flow {
      background: linear-gradient(135deg, #10b981, #059669);
      color: var(--card-bg);
      padding: 1rem 2rem;
      border-radius: 30px;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--shadow);
      animation: fadeInFlow 0.5s ease-out;
    }

    .error-flow {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: var(--card-bg);
      padding: 1rem 2rem;
      border-radius: 30px;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--shadow);
      animation: fadeInFlow 0.5s ease-out;
    }

    .form-group {
      position: relative;
      margin-bottom: 1.5rem;
    }

    .helper-text {
      color: #6b7280;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }

    .helper-text.error {
      color: #ef4444;
    }
  </style>
</head>

<body>
  <button class="sidebar-toggle" aria-label="Toggle Sidebar">
    <i class="fas fa-bars"></i>
  </button>
  <%- include('../partials/sidebar', { token: token || '' , currentPage: 'update-profile' }) %>

    <div class="morphing-container">
      <header class="organic-header fade-in-flow">
        <div class="px-8 py-6">
          <div class="flex items-center">
            <div class="icon-bubble mr-6">
              <i class="fas fa-user-edit"></i>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-flow">Update Profile</h1>
              <p class="text-flow opacity-90 text-lg">Keep your details current</p>
            </div>
          </div>
        </div>
      </header>

      <main class="flowing-grid">
        <section class="update-profile-section">
          <div class="blob-card update-profile-blob slide-in-left">
            <div class="p-8">
              <h3 class="text-2xl font-bold text-flow mb-6">Edit Your Information</h3>
              <% if (typeof success !=='undefined' && success) { %>
                <div class="success-flow fade-in-flow" id="success-message">
                  <div class="flex items-center">
                    <i class="fas fa-check-circle text-2xl mr-4"></i>
                    <span class="font-semibold text-lg">
                      <%= success %>
                    </span>
                  </div>
                  <button class="text-white hover:text-gray-200" onclick="dismissMessage('success-message')"
                    aria-label="Close success message">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <% } %>
                  <% if (typeof error !=='undefined' && error) { %>
                    <div class="error-flow fade-in-flow" id="error-message">
                      <div class="flex items-center">
                        <i class="fas fa-exclamation-circle text-2xl mr-4"></i>
                        <span class="font-semibold text-lg">
                          <%= error %>
                        </span>
                      </div>
                      <button class="text-white hover:text-gray-200" onclick="dismissMessage('error-message')"
                        aria-label="Close error message">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                    <% } %>
                      <form id="update-profile-form" action="/users/update-profile?token=<%= token || '' %>"
                        method="POST" onsubmit="handleSubmit(event)">
                        <div class="form-group">
                          <label for="phone" class="block text-flow font-semibold mb-2">Phone Number</label>
                          <input type="text" id="phone" name="phone"
                            value="<%= user && user.details && user.details.phone ? user.details.phone : '' %>"
                            class="input-flow" required pattern="\d{10,15}" title="Phone number must be 10-15 digits"
                            oninput="validatePhone(this)" />
                          <p id="phone-helper" class="helper-text">Enter 10-15 digits</p>
                        </div>
                        <div class="form-group">
                          <label for="address" class="block text-flow font-semibold mb-2">Address</label>
                          <textarea id="address" name="address" class="input-flow" rows="4" required maxlength="200"
                            oninput="validateAddress(this)"><%= user && user.details && user.details.address ? user.details.address : '' %></textarea>
                          <p id="address-helper" class="helper-text">Maximum 200 characters</p>
                        </div>
                        <input type="hidden" name="token" value="<%= token || '' %>" />
                        <div class="flex space-x-4">
                          <button type="submit" id="submit-button" class="flowing-button">
                            <i class="fas fa-save mr-2"></i> Save Changes
                          </button>
                          <a href="/users/user?token=<%= token || '' %>"
                            class="flowing-button bg-gray-600 hover:bg-gray-700">
                            <i class="fas fa-times mr-2"></i> Cancel
                          </a>
                        </div>
                      </form>
            </div>
          </div>
        </section>
      </main>
    </div>

    <script>
      // Sidebar toggle
      const sidebar = document.querySelector(".sidebar");
      const toggle = document.querySelector(".sidebar-toggle");
      toggle.addEventListener("click", () => {
        sidebar.classList.toggle("active");
      });

      // Auto-dismiss messages
      function dismissMessage(id) {
        const message = document.getElementById(id);
        if (message) {
          message.style.transition = "opacity 0.5s ease";
          message.style.opacity = "0";
          setTimeout(() => message.remove(), 500);
        }
      }

      if (document.getElementById("success-message")) {
        setTimeout(() => dismissMessage("success-message"), 5000);
      }
      if (document.getElementById("error-message")) {
        setTimeout(() => dismissMessage("error-message"), 5000);
      }

      // Real-time phone validation
      function validatePhone(input) {
        const helper = document.getElementById("phone-helper");
        const pattern = /^\d{10,15}$/;
        if (!pattern.test(input.value)) {
          input.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Please enter 10-15 digits";
        } else {
          input.classList.remove("invalid");
          helper.classList.remove("error");
          helper.textContent = "Enter 10-15 digits";
        }
      }

      // Real-time address validation
      function validateAddress(textarea) {
        const helper = document.getElementById("address-helper");
        if (!textarea.value.trim()) {
          textarea.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Address is required";
        } else if (textarea.value.length > 200) {
          textarea.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Address cannot exceed 200 characters";
        } else {
          textarea.classList.remove("invalid");
          helper.classList.remove("error");
          helper.textContent = `Maximum 200 characters (${textarea.value.length}/200)`;
        }
      }

      // Form submission with loading state
      async function handleSubmit(event) {
        event.preventDefault();
        const form = document.getElementById("update-profile-form");
        const submitButton = document.getElementById("submit-button");
        const phoneInput = document.getElementById("phone");
        const addressInput = document.getElementById("address");

        // Client-side validation
        const phonePattern = /^\d{10,15}$/;
        if (!phonePattern.test(phoneInput.value.trim())) {
          const helper = document.getElementById("phone-helper");
          phoneInput.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Please enter 10-15 digits";
          return;
        }
        if (!addressInput.value.trim()) {
          const helper = document.getElementById("address-helper");
          addressInput.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Address is required";
          return;
        }
        if (addressInput.value.length > 200) {
          const helper = document.getElementById("address-helper");
          addressInput.classList.add("invalid");
          helper.classList.add("error");
          helper.textContent = "Address cannot exceed 200 characters";
          return;
        }

        // Show loading state
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Saving...';

        try {
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: "POST",
            body: formData,
          });

          if (response.redirected) {
            window.location.href = response.url;
          } else {
            const errorData = await response.json();
            const errorDiv = document.createElement("div");
            errorDiv.id = "error-message";
            errorDiv.className = "error-flow fade-in-flow";
            errorDiv.innerHTML = `
              <div class="flex items-center">
                <i class="fas fa-exclamation-circle text-2xl mr-4"></i>
                <span class="font-semibold text-lg">${errorData.error || "Failed to update profile"
              }</span>
              </div>
              <button class="text-white hover:text-gray-200" onclick="dismissMessage('error-message')" aria-label="Close error message">
                <i class="fas fa-times"></i>
              </button>
            `;
            form.parentNode.insertBefore(errorDiv, form);
            setTimeout(() => dismissMessage("error-message"), 5000);
          }
        } catch (err) {
          console.error("Form submission error:", err);
          const errorDiv = document.createElement("div");
          errorDiv.id = "error-message";
          errorDiv.className = "error-flow fade-in-flow";
          errorDiv.innerHTML = `
            <div class="flex items-center">
              <i class="fas fa-exclamation-circle text-2xl mr-4"></i>
              <span class="font-semibold text-lg">Failed to update profile: ${err.message}</span>
            </div>
            <button class="text-white hover:text-gray-200" onclick="dismissMessage('error-message')" aria-label="Close error message">
              <i class="fas fa-times"></i>
            </button>
          `;
          form.parentNode.insertBefore(errorDiv, form);
          setTimeout(() => dismissMessage("error-message"), 5000);
        } finally {
          submitButton.disabled = false;
          submitButton.innerHTML = '<i class="fas fa-save mr-2"></i> Save Changes';
        }
      }
    </script>
</body>

</html>